{"version":3,"sources":["components/Card.jsx","components/CardList.jsx","components/Title.jsx","components/SearchBox.jsx","components/Button.jsx","containers/App.jsx","serviceWorker.js","index.js"],"names":["divStyle","backgroundColor","fontFamily","verticalAlign","cursor","PersonCard","props","handleClick","setState","isHidden","state","data","this","homeworld","films","species","vehicles","starships","created","edited","url","people","residents","className","style","onClick","name","Object","entries","slice","map","info","i","charAt","toUpperCase","replace","class","Component","textAlign","CardList","Title","SearchBox","searchChange","type","placeholder","onChange","Buttom","App","onSearchChange","event","searchField","target","value","onButtonChange","a","fetch","textContent","toLowerCase","response","json","results","next","fetchNext","console","log","link","totalData","concat","filteredData","filter","item","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3128f873.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Card.css';\r\n\r\nvar divStyle = {\r\n    backgroundColor: \"#DECC09\",\r\n    fontFamily: \"starout\",\r\n    verticalAlign: \"text-top\",\r\n    cursor: \"pointer\",\r\n}\r\n\r\nclass PersonCard extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isHidden: true\r\n        }\r\n    }\r\n\r\n\r\n    handleClick = () => {\r\n        this.setState({ isHidden: !this.state.isHidden });\r\n    }\r\n\r\n    render() {\r\n        const data = this.props.data;\r\n        delete data.homeworld;\r\n        delete data.films;\r\n        delete data.species;\r\n        delete data.vehicles;\r\n        delete data.starships;\r\n        delete data.created;\r\n        delete data.edited;\r\n        delete data.url;\r\n        delete data.people;\r\n        delete data.residents;\r\n        return (\r\n            <div className=' dib br3 pa3 ma2 grow bw2 shadow-5' style={divStyle} onClick={this.handleClick}>\r\n                <h2>{data.name}</h2>\r\n                <div>\r\n                    {\r\n                        this.state.isHidden ?\r\n                            Object.entries(data).slice(1, 3).map((info, i) => {\r\n                                return (<p>{info[0].charAt(0).toUpperCase() + info[0].slice(1).replace(/_/g, ' ')}: {info[1]}</p>\r\n                                );\r\n                            })\r\n                            :\r\n                            Object.entries(data).slice(1).map((info, i) => {\r\n                                return (<p>{info[0].charAt(0).toUpperCase() + info[0].slice(1).replace(/_/g, ' ')}: {info[1]}</p>\r\n                                );\r\n                            })\r\n                    }\r\n                </div>\r\n                <div>\r\n                    {\r\n                        this.state.isHidden ?\r\n                            <i class=\"arrow down\"></i>\r\n                            :\r\n                            <i class=\"arrow up\"></i>\r\n                    }\r\n                </div>\r\n            </div>\r\n        )\r\n\r\n    }\r\n}\r\n\r\nexport default PersonCard;                     ","import React from 'react';\r\nimport PersonCard from './Card';\r\n\r\n\r\nconst CardList = ({ data }) => {\r\n    return (\r\n        <div style={divStyle}>\r\n            {\r\n                data.map((info, i) => {\r\n                    return (<PersonCard data={info} />\r\n                    );\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nconst divStyle = {\r\n    textAlign: \"center\"\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\nimport \"./Title.css\"\r\n\r\nconst Title = () => {\r\n    return (<div className=\"pa2 tc\">\r\n        <h1 className='title'>STAR</h1>\r\n        <h1 className='title'>WARS</h1> \r\n    </div>)\r\n}\r\n\r\nexport default Title;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchChange }) => {\r\n    return (<div className='pa2'>\r\n        <input\r\n            className='pa1 br4 bg-dark-gray white'\r\n            type=\"search\"\r\n            placeholder='search'\r\n            onChange={searchChange} />\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\nimport './Button.css'\r\n\r\nconst Buttom = (props) => {\r\n    return (\r\n        < div >\r\n            <button onClick={(props.searchChange)} className=\"f6 grow no-underline br-pill ba bw2 ph3 pv2 mb2 dib\">{props.name} </button>\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default Buttom;","import React, { Component } from 'react';\nimport CardList from '../components/CardList'\nimport Title from '../components/Title'\nimport SearchBox from '../components/SearchBox';\nimport Button from '../components/Button';\nimport './App.css'\n\n\nclass App extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      data: [],\n      searchField: '',\n    }\n  }\n\n  async componentDidMount() {\n    const response = await fetch(`https://swapi.co/api/people`);\n    const { results, next } = await response.json();\n    this.setState({ data: results });\n    this.fetchNext(next);\n  }\n\n  onSearchChange = (event) => {\n    this.setState({ searchField: event.target.value });\n  }\n\n  onButtonChange = async (event) => {\n    try {\n      this.setState({ data: [] });\n      const response = await fetch(`https://swapi.co/api/${event.target.textContent.toLowerCase()}`);\n      const { results, next } = await response.json();\n      this.setState({ data: results });\n      this.fetchNext(next)\n    }\n    catch (e) {\n      console.log(\"fetch error\");\n    }\n  }\n\n  fetchNext = async (link) => {\n    const response = await fetch(link);\n    const { results, next } = await response.json();\n    let totalData = this.state.data.concat(results);\n    this.setState({ data: totalData });\n    next && this.fetchNext(next);\n  }\n\n\n  render() {\n    const filteredData = this.state.data.filter(item => {\n      return item.name.toLowerCase().includes(this.state.searchField.toLowerCase())\n    })\n\n\n    return (\n      <div>\n        <div>\n          <Title></Title>\n          <div className='tc'>\n            <SearchBox searchChange={this.onSearchChange} />\n          </div>\n          <ul>\n            <li><Button name=\"People\" searchChange={this.onButtonChange} /></li>\n            <li><Button name=\"Starships\" searchChange={this.onButtonChange} /></li>\n            <li><Button name=\"Vehicles\" searchChange={this.onButtonChange} /></li>\n            <li><Button name=\"Species\" searchChange={this.onButtonChange} /></li>\n            <li><Button name=\"Planets\" searchChange={this.onButtonChange} /></li>\n          </ul>\n        </div>\n        <div>{!this.state.data.length ?\n          <h1 className='tc white' style={{fontFamily:\"starhol\"}}>Loading...</h1>\n          :\n          <CardList data={filteredData} />\n        }\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './containers/App.jsx';\nimport './index.css';\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}